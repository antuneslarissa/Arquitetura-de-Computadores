INCLUDE "emu8086.inc"

TAM EQU 32

org 100h  

DEFINE_GET_STRING   
DEFINE_PRINT_STRING


MOV SI, OFFSET MSG1
CALL PRINT_STRING      

MOV DI, OFFSET WORD
MOV DX, TAM + 1
CALL GET_STRING 
CALL JUMP_LINE 
CALL JUMP_LINE
               
MOV SI, OFFSET WORD
MOV DI, OFFSET BEGINNING_A
MOV CL, [SI]
MOV CH, 1
MOV BX, 0                       

SEARCHING:
    CALL SEARCH_WORD_LEFT_RIGHT 
    VOLTA_LR:
        MOV SI, OFFSET MSG6
        CALL PRINT_STRING
        CMP BX, 0
        JZ CIRCULATION1
        CALL PRINT_FOUND
        BACK_LR:
            CALL JUMP_LINE 
            MOV BX, 0 
            POP SI 
        
    CALL SEARCH_WORD_RIGHT_LEFT 
    VOLTA_RL:  
        MOV SI, OFFSET MSG7
        CALL PRINT_STRING
        CMP BX, 0
        JZ CIRCULATION2
        CALL PRINT_FOUND
        BACK_RL:
            CALL JUMP_LINE 
            MOV BX, 0
            POP SI
     
    CALL SEARCH_WORD_UP_DOWN
    VOLTA_UD:
        MOV SI, OFFSET MSG8
        CALL PRINT_STRING
        CMP BX, 0
        JZ CIRCULATION3
        CALL PRINT_FOUND 
        BACK_UD:
            CALL JUMP_LINE 
            MOV BX, 0
            POP SI
    
    CALL SEARCH_WORD_DOWN_UP
    VOLTA_DU:
        MOV SI, OFFSET MSG9
        CALL PRINT_STRING
        CMP BX, 0
        JZ CIRCULATION4
        CALL PRINT_FOUND
        BACK_DU:
            CALL END_SEARCH_WORD
            MOV AH, 4CH
            MOV AL, 0
            INT 21H
          
CIRCULATION1:
    CALL PRINT_NOT_FOUND
    JMP BACK_LR  
CIRCULATION2:
    CALL PRINT_NOT_FOUND
    JMP BACK_RL
CIRCULATION3:
    CALL PRINT_NOT_FOUND
    JMP BACK_UD
CIRCULATION4:
    CALL PRINT_NOT_FOUND
    JMP BACK_DU


JUMP_LINE:                       
    PUSHF
    PUSH BX
    PUSH DX
    MOV AH,2
    MOV DL,13          
    INT 21H
    MOV AH,2
    MOV DL,10
    INT 21H
    POP DX          
    POP BX
    POPF
    ret

SEARCH_WORD_LEFT_RIGHT:
    MOV SI, OFFSET WORD
    MOV CH, 1
    MOV CL, [SI]  
    PUSHF
    PUSH DI
    PUSH DX        

START1:
    PUSH SI

COMPARE_LETTER_LR:
    MOV DH, [SI]
    MOV DL, [DI]
    
    CMP DH, 0
    JZ VERIFY_QUANTITY_LR
    CMP DL, 0
    JZ VOLTA_LR 
  
    CMP CH, 2
    JZ CASE_FIRST_REPEATED_LR  

    CMP DH, DL
    JE NEXT_LETTER_LR
    POP SI
    INC DI
    JMP START1

NEXT_LETTER_LR:
    INC CH
    INC SI
    INC DI
    JMP COMPARE_LETTER_LR 

CASE_FIRST_REPEATED_LR:
    CMP DL, CL
    JZ RETURN_LR
    DEC CH
    CMP DH, DL
    JZ NEXT_LETTER_LR 
    POP SI
    DEC CH
    INC DI
    JMP START1

RETURN_LR:
    DEC CH
    POP SI
    JMP COMPARE_LETTER_LR 
    
VERIFY_QUANTITY_LR:

    INC BX
    MOV SI, OFFSET WORD
    JMP START1

 
SEARCH_WORD_RIGHT_LEFT:      
    MOV SI, OFFSET WORD
    MOV DI, OFFSET BEGINNING_B 
    MOV CH, 1
    MOV CL, [SI]
    ADD DI, 41
    PUSHF
    PUSH DI
    PUSH DX    
     
START2:
    PUSH SI

COMPARE_LETTER_RL:
    MOV DH, [SI]
    MOV DL, [DI]

    CMP DH, 0
    JZ VERIFY_QUANTITY_RL
    CMP DL, 0
    JZ VOLTA_RL
    CMP CH, 2
    JZ CASE_FIRST_REPEATED_RL
                 
    CMP DH, DL
    JE NEXT_LETTER_RL
    POP SI
    DEC DI
    JMP START2

NEXT_LETTER_RL:
    INC CH
    INC SI
    DEC DI
    JMP COMPARE_LETTER_RL

CASE_FIRST_REPEATED_RL:
    CMP DL, CL
    JZ RETURN_RL
    DEC CH
    CMP DH, DL
    JZ NEXT_LETTER_RL 
    POP SI
    DEC CH
    DEC DI
    JMP START2

RETURN_RL:
    DEC CH
    POP SI
    JMP COMPARE_LETTER_RL
    
VERIFY_QUANTITY_RL:
    INC BX
    MOV SI, OFFSET WORD
    JMP START2
 

SEARCH_WORD_UP_DOWN:
    MOV SI, OFFSET WORD
    MOV DI, OFFSET BEGINNING_A
    MOV CH, 1
    MOV CL, [SI]  
    PUSHF
    PUSH DI
    PUSH DX   
     
START3:
    PUSH SI 

COMPARE_LETTER_UD:
    MOV DH, [SI]
    MOV DL, [DI]
    
    CMP DH, 0
    JZ VERIFY_QUANTITY_UD
    CMP DL, '#'
    JZ VOLTA_UD
    CMP DL, '*'
    JE JUMP_COLUMN_UD
    CMP CH, 2
    JZ CASE_FIRST_REPEATED_UD
    
    
    CMP DH, DL
    JE NEXT_LETTER_UD
    POP SI
    ADD DI, 42
    JMP START3   
    
JUMP_COLUMN_UD:
    SUB DI, 419   
    JMP COMPARE_LETTER_UD
    
NEXT_LETTER_UD:
    INC CH
    INC SI
    ADD DI, 42
    JMP COMPARE_LETTER_UD
    
CASE_FIRST_REPEATED_UD:
    CMP DL, CL
    JZ RETURN_UD
    DEC CH 
    CMP DH, DL
    JZ NEXT_LETTER_UD
    POP SI
    DEC CH
    ADD DI, 42
    JMP START3
    
RETURN_UD:
    DEC CH   
    POP SI
    JMP START3 
    
VERIFY_QUANTITY_UD:
    INC BX
    MOV SI, OFFSET WORD
    JMP START3
    

    
SEARCH_WORD_DOWN_UP:
    MOV SI, OFFSET WORD
    MOV DI, OFFSET BEGINNING_B
    MOV CH, 1
    MOV CL, [SI]
    ADD DI, 41 
    PUSHF
    PUSH DI
    PUSH DX   
         
START4:
    PUSH SI 
    
COMPARE_LETTER_DU:
    MOV DH, [SI]
    MOV DL, [DI]
    
    CMP DH, 0
    JZ VERIFY_QUANTITY_DU
    CMP DL, '#'
    JZ VOLTA_DU
    CMP DL, '$'
    JE JUMP_COLUMN_DU
    CMP CH, 2
    JZ CASE_FIRST_REPEATED_DU
    
    
    CMP DH, DL
    JE NEXT_LETTER_DU
    POP SI
    SUB DI, 42
    JMP START4   
    
JUMP_COLUMN_DU:
    ADD DI, 419   
    JMP COMPARE_LETTER_DU
    
NEXT_LETTER_DU:
    INC CH
    INC SI
    SUB DI, 42
    JMP COMPARE_LETTER_DU
    
CASE_FIRST_REPEATED_DU:
    CMP DL, CL
    JZ RETURN_DU
    DEC CH 
    CMP DH, DL
    JZ NEXT_LETTER_DU
    POP SI
    DEC CH
    SUB DI, 42
    JMP START4
    
RETURN_DU:
    DEC CH   
    POP SI
    JMP START4
    
VERIFY_QUANTITY_DU:
    INC BX
    MOV SI, OFFSET WORD
    JMP START4
                  
           
PRINT_FOUND:      
    MOV SI, OFFSET MSG2
    CALL PRINT_STRING
    MOV SI, OFFSET WORD
    CALL PRINT_STRING 
    MOV SI, OFFSET MSG4
    CALL PRINT_STRING 
    MOV AX, BX
    MOV CX, 0
    MOV DX, 0
    DIVIDE:
        CMP AX, 0
        JE PRINT
        MOV BX, 10
        DIV BX
        PUSH DX
        INC CX
        MOV DX, 0
        JMP DIVIDE
    
    PRINT:
         CMP CX, 0
         JE FINAL
         POP DX
         ADD DX, 48
         MOV AH, 02h
         INT 21h
         DEC CX
         JMP PRINT
         
    FINAL:
        MOV SI, OFFSET MSG5
        CALL PRINT_STRING    
        RET
     
    
PRINT_NOT_FOUND: 
    MOV SI, OFFSET MSG2
    CALL PRINT_STRING
    MOV SI, OFFSET WORD
    CALL PRINT_STRING
    MOV SI, OFFSET MSG3
    CALL PRINT_STRING 
    MOV SI, OFFSET MSG4
    CALL PRINT_STRING
    RET
    
END_SEARCH_WORD:
    POP SI
    POP DX
    POP DI
    RET
     

MSG1 DB "PROCURAR A PALAVRA: ",0
MSG2 DB "A PALAVRA ",0
MSG3 DB " NAO",0
MSG4 DB " FOI ENCONTRADA ",0 
MSG5 DB " VEZ(ES) ",0
MSG6 DB "NA HORIZONTAL, DA DIREITA PARA A ESQUERDA, ",0
MSG7 DB "NA HORIZONTAL, DA ESQUERDA PARA A DIREITA, ",0
MSG8 DB "NA VERITCAL, DE CIMA PARA BAIXO, ",0
MSG9 DB "NA VERTICAL, DE BAIXO PARA CIMA,  ",0
WORD DB TAM DUP(" "),0 

         DB 0, "#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@"
BEGINNING_A:DB "!MSJDFLKASJDKFLJSADKLFJAKLSJDFKLASJDFKJSM@"
         DB    "!AIJDFLKASJDKFLJSADKLFJAKLSJDFKLASJDFKJIA@"
         DB    "!ALGKDFJKLASDJFLKSAJDKFLJSADKLFJLKDSAJGLK@"
         DB    "!ASJUFLKASMIGUELJSADKLFJAKLSJDFKLESJMUKJS@"
         DB    "!ALLKELDFASDDJFLKSAJDKFLJSADKLFJLKUSEJFLK@"
         DB    "!ASEDELKASJDKFLJSADKLFJAKLSJDFKLASJGGKJSA@"
         DB    "!ALUUDFJKLASDJFLKSAJDKFLJSADKLFJLKDSIJFLK@"
         DB    "!ASGDFLKASJDKFLJSADKLFJAKLSJDFKLASJDEMJSA@"
         DB    "!AIIKDFJKLASDJFLKSAJDKFLJSALEUGIMKDSLJFLK@"
BEGINNING_B:DB "!MSMDFLKASJDKFLJSADKLFJAKLSJDFKLASJDFKJSA@"
         DB    "*****************************************#",0